mu
eta
# frf for ideal band-pass
frf.psi <- rep(0,grid)
frf.psi[(abs(freq.ft) >= mu) & (abs(freq.ft) <= eta)] <- 1
plot(ts(frf.psi))
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
# apply the MDFA concurrent filter
x.cycle.mdfa11 <- filter(x.sim[,1],bw.mdfa[[1]][1,1,],method="convolution",sides=1)
x.cycle.mdfa12 <- filter(x.sim[,2],bw.mdfa[[1]][1,2,],method="convolution",sides=1)
x.cycle.mdfa21 <- filter(x.sim[,1],bw.mdfa[[1]][2,1,],method="convolution",sides=1)
x.cycle.mdfa22 <- filter(x.sim[,2],bw.mdfa[[1]][2,2,],method="convolution",sides=1)
x.cycle.mdfa <- cbind(x.cycle.mdfa11 + x.cycle.mdfa12,x.cycle.mdfa21 + x.cycle.mdfa22)
x.cycle.mdfa <- x.cycle.mdfa[(len+1):(T.sim-len),]
x.cycle.ideal <- filter(x.sim,bp.filter,method="convolution",sides=2)[(len+1):(T-len),]
# compare in-sample performance
print(c(mean((x.cycle.ideal[,1] - x.cycle.mdfa[,1])^2),
mean((x.cycle.ideal[,2] - x.cycle.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
# Simulate a Gaussian STM  of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
psi.sim <- c(1.8905590615422, -11.9288577633298, -12.0809347541079,
0.660897814610799, -8.2863379601304, -5.66645335346871,
-1.34743227511595e-05, -1.41207967213544e-05)
psi.sim[7:8] <- c(0,0)
len <- 1000
dpoly <- c(1,-2,1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,3))
d <- length(dpoly) - 1
mu.sim <- mdfa.wnsim(psi.sim[1:3],rep(1,N),T.sim+burn,Inf)
Sigma.mu <- mu.sim[[2]]
mu.sim <- mdfa.ucsim(delta,mu.sim[[1]])[(burn+1-d):(T.sim+burn-d),]
irr.sim <- mdfa.wnsim(psi.sim[4:6],rep(1,N),T.sim,Inf)
Sigma.irr <- irr.sim[[2]]
irr.sim <- irr.sim[[1]]
x.sim <- mu.sim + irr.sim
plot(ts(x.sim))
Q.snr <- Sigma.mu %*% solve(Sigma.irr)
Sigma.mu
Sigma.irr
Q.snr
round(100*Q.snr,digits=2)
# construct and apply low-pass HP filter
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
hp.filter <- Q.snr %*% solve(Q.snr + (2 - 2*cos(freq.ft))^2*diag(N))
hp.filter <- array(0,c(N,N,grid))
for(i in 1:grid)
{
hp.filter[,,i] <- Q.snr %*% solve(Q.snr + (2 - 2*cos(freq.ft[i]))^2*diag(N))
}
plot(ts(hp.filter[1,1,]))
plot(ts(hp.filter[1,2,]))
plot(ts(hp.filter[2,2,]))
hp.frf <- array(0,c(N,N,grid))
for(i in 1:grid)
{
hp.frf[,,i] <- Q.snr %*% solve(Q.snr + (2 - 2*cos(freq.ft[i]))^2*diag(N))
}
hp.filter <- mdfa.coeff(hp.frf,-len,len)
plot(ts(hp.filter[1,1,]))
plot(ts(hp.filter[2,2,]))
x.trend.hp <- filter(x.sim,hp.filter,method="convolution",sides=2)[(len+1):(T-len),]
T
T.sim
dim(hp.filter)
dim(x.sim)
filter(seq(1,10),c(1,-1),method="convolution",sides=2)
filter(seq(1,10),c(1,-1),method="convolution",sides=1)
filter(seq(1,10),c(1,1,1),method="convolution",sides=1)
filter(seq(1,10),c(1,1,1),method="convolution",sides=2)
path.main <- getwd()
setwd(paste(path.main,"/Sweave/RcodeTSM",sep=""))
source("mvar.filter.r")
setwd(path.main)
# Simulate a Gaussian VAR(1) of sample size 2500:
set.seed(1234)
T <- 5000
N <- 2
phi.matrix <- rbind(c(1,.5),c(-.2,.3))
innovar.matrix <- diag(N)
gamma.0 <- matrix(solve(diag(N^2) - phi.matrix %x% phi.matrix) %*%
matrix(innovar.matrix,ncol=1),nrow=N)
x.init <- t(chol(gamma.0)) %*% rnorm(N)
x.next <- x.init
x.sim <- NULL
for(t in 1:T)
{
x.next <- phi.matrix %*% x.next + t(chol(innovar.matrix)) %*% rnorm(N)
x.sim <- cbind(x.sim,x.next)
}
x.sim <- ts(t(x.sim))
x.acf <- acf(x.sim,type="covariance",plot=FALSE,lag.max=T)[[1]]
x.acf <- aperm(aperm(x.acf,c(3,2,1)),c(2,1,3))
# construct and apply low pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- filter(x.sim,lp.filter,method="convolution",sides=2)[(len+1):(T-len),]
plot(ts(x.trend.ideal))
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c((2*len+1),N,N)))
plot(ts(x.trend.ideal))
x.trend.ideal <- filter(x.sim,lp.filter,method="convolution",sides=2)[(len+1):(T-len),]
test <- array(t(lp.filter) %x% diag(N),c((2*len+1),N,N))
plot(ts(test[1,1,]))
test[1,1,]
x.trend.ideal <- filter(x.sim,lp.filter,method="convolution",sides=2)[(len+1):(T-len),]
plot(ts(x.trend.ideal))
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
plot(ts(x.trend.ideal))
length(lp.filter)
2*len+1
test <- array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1)))
plot(ts(test[1,1,]))
plot(ts(test[2,2,]))
x.trend.ideal <- filter(x.sim,lp.filter,method="convolution",sides=2)[(len+1):(T-len),]
dim(x.trend.ideal)
plot(ts(x.trend.ideal))
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
dim(x.trend.ideal)
x.trend.ideal[1,]
mvar.filter
data.ts <- x.sim
psi.filter <- lp.filter
N <- dim(data.ts)[2]
T <- dim(data.ts)[1]
L <- dim(psi.array)[3]
L
L <- dim(psi.filter)[3]
L
path.main <- getwd()
setwd(paste(path.main,"/Sweave/RcodeTSM",sep=""))
source("mvar.filter.r")
setwd(path.main)
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
dim(x.trend.ideal)
plot(ts(x.trend.ideal))
# get MDFA concurrent filter
q <- 20
grid <- T
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,Grid)
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat <- mdfa.pergram(x.sim,1)
lp.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
# apply the MDFA concurrent filter
x.trend.mdfa11 <- filter(x.sim[,1],lp.mdfa[[1]][1,1,],method="convolution",sides=1)
x.trend.mdfa12 <- filter(x.sim[,2],lp.mdfa[[1]][1,2,],method="convolution",sides=1)
x.trend.mdfa21 <- filter(x.sim[,1],lp.mdfa[[1]][2,1,],method="convolution",sides=1)
x.trend.mdfa22 <- filter(x.sim[,2],lp.mdfa[[1]][2,2,],method="convolution",sides=1)
x.trend.mdfa <- cbind(x.trend.mdfa11 + x.trend.mdfa12,x.trend.mdfa21 + x.trend.mdfa22)
x.trend.mdfa <- x.trend.mdfa[(len+1):(T-len),]
dim(x.trend.mdfa)
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(lp.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,lp.mdf[[1]])
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa[[1]])
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
dim(x.trend.mdfa)
dim(lp.mdfa)
dim(lp.mdfa[[1]])
# apply the MDFA concurrent filter
x.trend.mdfa11 <- filter(x.sim[,1],lp.mdfa[[1]][1,1,],method="convolution",sides=1)
x.trend.mdfa12 <- filter(x.sim[,2],lp.mdfa[[1]][1,2,],method="convolution",sides=1)
x.trend.mdfa21 <- filter(x.sim[,1],lp.mdfa[[1]][2,1,],method="convolution",sides=1)
x.trend.mdfa22 <- filter(x.sim[,2],lp.mdfa[[1]][2,2,],method="convolution",sides=1)
x.trend.mdfa <- cbind(x.trend.mdfa11 + x.trend.mdfa12,x.trend.mdfa21 + x.trend.mdfa22)
dim(x.trend.mdfa)
x.trend.mdfa[1,]
x.trend.mdfa[21,]
x.trend.mdfa[20,]
x.trend.mdfa[2,]
x.trend.mdfa[1:20,]
x.trend.mdfa <- x.trend.mdfa[(len+1):(T-len),]
x.trend.mdfa <-
temp <-  mvar.filter(x.sim,lp.mdfa[[1]])[(len-q+1):(T-q+1-len),]
x.trend.mdfa[1,]
temp[1,]
dim(temp)
dim(x.trend.mdfa)
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# construct and apply low pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
# get MDFA concurrent filter
q <- 20
grid <- T
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat <- mdfa.pergram(x.sim,1)
lp.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
# apply the MDFA concurrent filter
x.trend.mdfa11 <- filter(x.sim[,1],lp.mdfa[[1]][1,1,],method="convolution",sides=1)
x.trend.mdfa12 <- filter(x.sim[,2],lp.mdfa[[1]][1,2,],method="convolution",sides=1)
x.trend.mdfa21 <- filter(x.sim[,1],lp.mdfa[[1]][2,1,],method="convolution",sides=1)
x.trend.mdfa22 <- filter(x.sim[,2],lp.mdfa[[1]][2,2,],method="convolution",sides=1)
x.trend.mdfa <- cbind(x.trend.mdfa11 + x.trend.mdfa12,x.trend.mdfa21 + x.trend.mdfa22)
x.trend.mdfa <- x.trend.mdfa[(len+1):(T-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(lp.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa[[1]])[(len-q+1):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
dim(x.trend.ideal)
# apply the MDFA concurrent filter
x.trend.mdfa11 <- filter(x.sim[,1],lp.mdfa[[1]][1,1,],method="convolution",sides=1)
x.trend.mdfa12 <- filter(x.sim[,2],lp.mdfa[[1]][1,2,],method="convolution",sides=1)
x.trend.mdfa21 <- filter(x.sim[,1],lp.mdfa[[1]][2,1,],method="convolution",sides=1)
x.trend.mdfa22 <- filter(x.sim[,2],lp.mdfa[[1]][2,2,],method="convolution",sides=1)
x.trend.mdfa <- cbind(x.trend.mdfa11 + x.trend.mdfa12,x.trend.mdfa21 + x.trend.mdfa22)
x.trend.mdfa <- x.trend.mdfa[(len+1):(T-len),]
dim(x.trend.mdfa)
x.trend.mdfa[2999:3000,]
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa[[1]])[(len-q+1):(T-q-len),]
x.trend.mdfa[2999:3000,]
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa[[1]])[(len-q):(T-q-1-len),]
x.trend.mdfa[2999:3000,]
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
x.trend.mdfa[2999:3000,]
# apply the MDFA concurrent filter
x.trend.mdfa11 <- filter(x.sim[,1],lp.mdfa[[1]][1,1,],method="convolution",sides=1)
x.trend.mdfa12 <- filter(x.sim[,2],lp.mdfa[[1]][1,2,],method="convolution",sides=1)
x.trend.mdfa21 <- filter(x.sim[,1],lp.mdfa[[1]][2,1,],method="convolution",sides=1)
x.trend.mdfa22 <- filter(x.sim[,2],lp.mdfa[[1]][2,2,],method="convolution",sides=1)
x.trend.mdfa <- cbind(x.trend.mdfa11 + x.trend.mdfa12,x.trend.mdfa21 + x.trend.mdfa22)
x.trend.mdfa <- x.trend.mdfa[(len+1):(T-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(lp.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# Simulate a Gaussian VAR(1) of sample size 2500:
set.seed(1234)
T <- 5000
N <- 3
phi.matrix <- rbind(c(.9,0,0),c(0,.1,0),c(0,0,-.9))
innovar.matrix <- diag(N)
gamma.0 <- matrix(solve(diag(N^2) - phi.matrix %x% phi.matrix) %*%
matrix(innovar.matrix,ncol=1),nrow=N)
x.init <- t(chol(gamma.0)) %*% rnorm(N)
x.next <- x.init
x.sim <- NULL
for(t in 1:T)
{
x.next <- phi.matrix %*% x.next + t(chol(innovar.matrix)) %*% rnorm(N)
x.sim <- cbind(x.sim,x.next)
}
x.sim <- ts(t(x.sim))
x.acf <- acf(x.sim,type="covariance",plot=FALSE,lag.max=T)[[1]]
x.acf <- aperm(aperm(x.acf,c(3,2,1)),c(2,1,3))
# construct and apply low pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- filter(x.sim,lp.filter,method="convolution",sides=2)[(len+1):(T-len),]
# get MDFA concurrent filter
q <- 20
# get MDFA concurrent filter
q <- 20
grid <- T
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,rid))
spec.hat <- mdfa.pergram(x.sim,1)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat <- mdfa.pergram(x.sim,1)
lp.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
# apply the MDFA concurrent filter
x.trend.mdfa11 <- filter(x.sim[,1],lp.mdfa[[1]][1,1,],method="convolution",sides=1)
x.trend.mdfa12 <- filter(x.sim[,2],lp.mdfa[[1]][1,2,],method="convolution",sides=1)
x.trend.mdfa13 <- filter(x.sim[,3],lp.mdfa[[1]][1,3,],method="convolution",sides=1)
x.trend.mdfa21 <- filter(x.sim[,1],lp.mdfa[[1]][2,1,],method="convolution",sides=1)
x.trend.mdfa22 <- filter(x.sim[,2],lp.mdfa[[1]][2,2,],method="convolution",sides=1)
x.trend.mdfa23 <- filter(x.sim[,3],lp.mdfa[[1]][2,3,],method="convolution",sides=1)
x.trend.mdfa31 <- filter(x.sim[,1],lp.mdfa[[1]][3,1,],method="convolution",sides=1)
x.trend.mdfa32 <- filter(x.sim[,2],lp.mdfa[[1]][3,2,],method="convolution",sides=1)
x.trend.mdfa33 <- filter(x.sim[,3],lp.mdfa[[1]][3,3,],method="convolution",sides=1)
x.trend.mdfa <- cbind(x.trend.mdfa11 + x.trend.mdfa12 + x.trend.mdfa13,
x.trend.mdfa21 + x.trend.mdfa22 + x.trend.mdfa23,
x.trend.mdfa31 + x.trend.mdfa32 + x.trend.mdfa33)
x.trend.mdfa <- x.trend.mdfa[(len+1):(T-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2),
mean((x.trend.ideal[,3] - x.trend.mdfa[,3])^2)))
# compare to criterion value
diag(lp.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2),
mean((x.trend.ideal[,3] - x.trend.mdfa[,3])^2)))
# Simulate a Gaussian bivariate process of sample size 200:
set.seed(1234)
T <- 200
N <- 2
phi <- .9
sigma <- 1
gamma.0 <- 1/(1-phi^2)
x.init <- sqrt(gamma.0)*rnorm(1)
x.next <- x.init
x.sim <- x.init
for(t in 1:T)
{
x.next <- phi * x.next + rnorm(1)
x.sim <- c(x.sim,x.next)
}
w.sim <- x.sim[-1] + sigma*rnorm(T)
x.sim <- cbind(x.sim[-(T+1)],w.sim)
# MDFA
q <- 20
grid <- T
m <- floor(grid/2)
# The Fourier frequencies
lambda.ft <- exp(-1i*2*pi*grid^{-1}*(seq(1,grid) - (m+1)))
# frf for 1-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-1},nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat <- mdfa.pergram(x.sim,1)
fore.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
fore.udfa <- mdfa.unconstrained(frf.psi[1,1,,drop=FALSE],spec.hat[1,1,,drop=FALSE],q)
# apply the MDFA concurrent filter
x.fore.mdfa11 <- filter(x.sim[,1],fore.mdfa[[1]][1,1,],method="convolution",sides=1)
x.fore.mdfa12 <- filter(x.sim[,2],fore.mdfa[[1]][1,2,],method="convolution",sides=1)
x.fore.mdfa <- x.fore.mdfa11 + x.fore.mdfa12
dim(x.fore.mdfa)
length(x.fore.mdfa)
x.trend.hp <- mvar.filter(x.sim,hp.filter)
dim(hp.filter)
# Simulate a Gaussian STM  of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
psi.sim <- c(1.8905590615422, -11.9288577633298, -12.0809347541079,
0.660897814610799, -8.2863379601304, -5.66645335346871,
-1.34743227511595e-05, -1.41207967213544e-05)
psi.sim[7:8] <- c(0,0)
len <- 1000
dpoly <- c(1,-2,1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,3))
d <- length(dpoly) - 1
mu.sim <- mdfa.wnsim(psi.sim[1:3],rep(1,N),T.sim+burn,Inf)
Sigma.mu <- mu.sim[[2]]
mu.sim <- mdfa.ucsim(delta,mu.sim[[1]])[(burn+1-d):(T.sim+burn-d),]
irr.sim <- mdfa.wnsim(psi.sim[4:6],rep(1,N),T.sim,Inf)
Sigma.irr <- irr.sim[[2]]
irr.sim <- irr.sim[[1]]
x.sim <- mu.sim + irr.sim
plot(ts(x.sim))
#plot(ts(x.sim))
Q.snr <- Sigma.mu %*% solve(Sigma.irr)
# construct and apply low-pass HP filter
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
hp.frf <- array(0,c(N,N,grid))
for(i in 1:grid)
{
hp.frf[,,i] <- Q.snr %*% solve(Q.snr + (2 - 2*cos(freq.ft[i]))^2*diag(N))
}
hp.filter <- mdfa.coeff(hp.frf,-len,len)
x.trend.hp <- mvar.filter(x.sim,hp.filter)
dim(x.trend.hp)
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
spec.hat <- mdfa.pergram(x.diff,dpoly)
constraints.mdfa <- mdfa.getconstraints(hp.frf,c(0,0),NULL,0*diag(N),q)
hp.mdfa <- mdfa.filter(hp.frf,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
# apply the MDFA concurrent filter
x.trend.mdfa <- mvar.filter(x.sim,hp.mdfa[[1]])[(len-q+2):(T.sim-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
# compare to criterion value
diag(hp.mdfa[[2]])
# compare in-sample performance
print(c(mean((x.trend.hp[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.hp[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(hp.mdfa[[2]])
#plot(ts(x.sim))
#Q.snr <- Sigma.mu %*% solve(Sigma.irr)
Q.snr <- (1/1600) * diag(N)
# construct and apply low-pass HP filter
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
hp.frf <- array(0,c(N,N,grid))
for(i in 1:grid)
{
hp.frf[,,i] <- Q.snr %*% solve(Q.snr + (2 - 2*cos(freq.ft[i]))^2*diag(N))
}
hp.filter <- mdfa.coeff(hp.frf,-len,len)
x.trend.hp <- mvar.filter(x.sim,hp.filter)
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
spec.hat <- mdfa.pergram(x.diff,dpoly)
constraints.mdfa <- mdfa.getconstraints(hp.frf,c(0,0),NULL,0*diag(N),q)
hp.mdfa <- mdfa.filter(hp.frf,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
# apply the MDFA concurrent filter
x.trend.mdfa <- mvar.filter(x.sim,hp.mdfa[[1]])[(len-q+2):(T.sim-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.hp[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.hp[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(hp.mdfa[[2]])
path.main <- getwd()
#load_code(paste(path.main,"/Sweave/Sigex",sep=""))
setwd(paste(path.main,"/Sweave/RcodeTSM",sep=""))
source("mvar.specfact.r")
source("mdfa.whfrf.r")
psi.sim <- c(2.17150287559847, -8.36795922528, -6.04133725367594,
0.0648981656699, -6.80849700177184, -6.66004335288479,
-0.00016098322952, 0.00051984185863)
psi.sim[7:8] <- c(0,0)
N <- 2
grid <- 1000
delta <- array(t(c(1,-1)) %x% diag(N),c(N,N,2))
mu.sim <- mdfa.wnsim(psi.sim[1:3],rep(1,N),10,Inf)
Sigma.mu <- mu.sim[[2]]
irr.sim <- mdfa.wnsim(psi.sim[4:6],rep(1,N),10,Inf)
Sigma.irr <- irr.sim[[2]]
iden <- array(diag(N),c(N,N,1))
f.mu <- mdfa.spectra(iden,iden,Sigma.mu,grid)
f.irr <- mdfa.spectra(iden,iden,Sigma.irr,grid)
trend.frf <- mdfa.wkfrf(iden,delta,f.irr,f.mu)
par(mar=c(2,2,2,2)+0.1,cex.lab=.8,mfrow=c(N,N))
for(i in 1:N)
{
for(j in 1:N)
{
plot(ts(Re(trend.frf[i,j,]),frequency=grid/2,start=-1),ylim=c(0,1),ylab="",
xlab="Cycles",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
}
}
# set directory to GitHub/MDFA-Legacy
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
# set directory to GitHub/MDFA-Legacy
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
getwd()
setwd(path.main)
path.main
