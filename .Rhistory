frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa[[1]])[(len-q+2):(T-q+1-len),]
constraints.mdfa[[2]]
dim(constraints.mdfa[[2]])
constraints.mdfa[[2]][,1,]
constraints.mdfa[[2]][,2,]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
set.seed(123)
T.sim <- 5000
burn <- 1000
N <- 2
rho <- .95
theta <- pi/24
phi <- matrix(c(rho*cos(theta),rho*sin(theta),-rho*sin(theta),rho*cos(theta)),c(2,2))
phi.array <- array(cbind(diag(N),-1*phi),c(N,N,2))
dpoly <- c(1,-1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,2))
d <- length(dpoly) - 1
z.sim <- mdfa.wnsim(rep(0,3),rep(1,N),T.sim+burn,Inf)
Sigma <- z.sim[[2]]
var.sim <- mdfa.ucsim(phi.array,z.sim[[1]])
x.sim <- mdfa.ucsim(delta,var.sim)[(burn+1-d-2):(T.sim+burn-d-2),]
# construct and apply ideal band-pass filter
mu <- pi/60
eta <- pi/12
len <- 1000
bp.filter <- c(eta/pi,sin(seq(1,len)*eta)/(pi*seq(1,len))) -
c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
bp.filter <- c(rev(bp.filter),bp.filter[-1])
x.cycle.ideal <- filter(x.sim,bp.filter,method="convolution",sides=2)[(len+1):(T-len),]
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
spec.hat <- mdfa.pergram(x.diff,dpoly)
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal band-pass
frf.psi <- rep(0,grid)
frf.psi[(abs(freq.ft) >= mu) & (abs(freq.ft) <= eta)] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,NULL,0,0*diag(N),q)
bp.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.cycle.mdfa <- mvar.filter(x.sim,bp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.cycle.ideal[,1] - x.cycle.mdfa[,1])^2),
mean((x.cycle.ideal[,2] - x.cycle.mdfa[,2])^2)))
# compare to criterion value
diag(bp.mdfa[[2]])
# get MDFA concurrent filter
q <- 100
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal band-pass
frf.psi <- rep(0,grid)
frf.psi[(abs(freq.ft) >= mu) & (abs(freq.ft) <= eta)] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,NULL,0,0*diag(N),q)
bp.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.cycle.mdfa <- mvar.filter(x.sim,bp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.cycle.ideal[,1] - x.cycle.mdfa[,1])^2),
mean((x.cycle.ideal[,2] - x.cycle.mdfa[,2])^2)))
# compare to criterion value
diag(bp.mdfa[[2]])
# get MDFA concurrent filter
q <- 10
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal band-pass
frf.psi <- rep(0,grid)
frf.psi[(abs(freq.ft) >= mu) & (abs(freq.ft) <= eta)] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,NULL,0,0*diag(N),q)
bp.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.cycle.mdfa <- mvar.filter(x.sim,bp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.cycle.ideal[,1] - x.cycle.mdfa[,1])^2),
mean((x.cycle.ideal[,2] - x.cycle.mdfa[,2])^2)))
# compare to criterion value
diag(bp.mdfa[[2]])
plot.ts(x.cycle.ideal[,2])
lines(x.cycle.mdfa[,2],col=2)
plot.ts(x.cycle.ideal[,1])
lines(x.cycle.mdfa[,1],col=2)
dim(bp.mdfa[[1]])
plot.ts(bp.mdfa[[1]][1,1,])
# get MDFA concurrent filter
q <- 20
# frf for ideal band-pass
frf.psi <- rep(0,grid)
frf.psi[(abs(freq.ft) >= mu) & (abs(freq.ft) <= eta)] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,NULL,0,0*diag(N),q)
bp.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.cycle.mdfa <- mvar.filter(x.sim,bp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.cycle.ideal[,1] - x.cycle.mdfa[,1])^2),
mean((x.cycle.ideal[,2] - x.cycle.mdfa[,2])^2)))
# compare to criterion value
diag(bp.mdfa[[2]])
plot.ts(x.sim)
constraints.mdfa <- mdfa.getconstraints(frf.psi,NULL,0,0*diag(N),q)
constraints.mdfa <- mdfa.getconstraints(frf.psi,NULL,NULL,0*diag(N),q)
constraints.mdfa <- mdfa.getconstraints(frf.psi,NULL,0,0*diag(N),q)
bp.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
bp.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
x.cycle.mdfa <- mvar.filter(x.sim,bp.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.cycle.ideal[,1] - x.cycle.mdfa[,1])^2),
mean((x.cycle.ideal[,2] - x.cycle.mdfa[,2])^2)))
# compare to criterion value
diag(bp.mdfa[[2]])
dim(spec.hat)
spec.hat[,,2500]
spec.hat[,,2501]
spec.hat[,,2502]
# Simulate a Gaussian RW of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
dpoly <- c(1,-1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,2))
d <- length(dpoly) - 1
z.sim <- mdfa.wnsim(rep(0,3),rep(1,N),T.sim+burn,Inf)
Sigma <- z.sim[[2]]
x.sim <- mdfa.ucsim(delta,z.sim[[1]])[(burn+1-d):(T.sim+burn-d),]
# construct and apply ideal low-pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
spec.hat <- mdfa.pergram(x.diff,dpoly)
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp
plot.ts(Re(frf.psi.sharp))
plot.ts(Mod(frf.psi.sharp))
frf.psi[1]
grid
m
freq.ft[m]
freq.ft[m+1]
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
plot.ts(Mod(frf.psi.sharp))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
bw.mdfa <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q)
dim(spec.hat.sharp)
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
bw.mdfa <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q)
# compare to criterion value
diag(bw.mdfa[[2]])
bw.mdfa
q
plot.ts(spec.hat.sharp[1,1,])
plot.ts(frf.hat.sharp[1,1,])
plot.ts(frf.psi.sharp[1,1,])
plot.ts(Re(frf.psi.sharp[1,1,]))
plot.ts(Im(frf.psi.sharp[1,1,]))
frf <- frf.psi.sharp
spec <- spec.hat.sharp
N <- dim(frf)[1]
R.mat <- diag(q) %x% diag(N)
Q.mat <- matrix(0,nrow=N*q,ncol=N)
R <- array(R.mat,c(N,q,N,q))
Q <- array(Q.mat,c(N,q,N))
out <- mdfa.filter(frf,spec,R,Q)
out
N <- dim(spec)[1]
grid <- dim(frf)[3]
m <- floor(grid/2)
q <- dim(R)[2]
M <- dim(R)[4]
R.mat <- matrix(R,nrow=N*q,ncol=N*M)
Q.mat <- matrix(Q,ncol=N)
R.mat
dim(R.mat)
Q.mat
fpsi <- NULL
fmat <- NULL
lambda.ft <- exp(-1i*2*pi*grid^{-1}*(seq(1,grid) - (m+1)))	## this is e^{-i lambda}
opt.val <- do.call(cbind,lapply(seq(1,grid),function(i) frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i]))))
opt.val <- grid^{-1}*opt.val %*% (rep(1,grid) %x% diag(N))
grid
opt.val <- do.call(cbind,lapply(seq(1,grid),function(i) frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i]))))
opt.val
dim(opt.val)
plot.ts(opt.val[1,])
plot.ts(opt.val[2,])
opt.val[,1:10]
spec[,,1:10]
spec[,,m+1]
spec[,,m]
spec[,,m+2]
opt.val <- do.call(cbind,lapply(seq(1,grid),function(i) frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i]))))
opt.val <- grid^{-1}*opt.val %*% (rep(1,grid) %x% diag(N))
opt.val <- 0*diag(N)
for(k in 1:grid) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
for(i in 1:grid) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- opt.val/grid
for(i in 1:grid) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- 0*diag(N)
for(i in 1:grid) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
frf[,,grid]
Conj(t(frf[,,grid]))
spec[,,grid]
grid
opt.val <- 0*diag(N)
for(i in 1:100) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- 0*diag(N)
for(i in 1:1000) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- 0*diag(N)
for(i in 1:4000) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- 0*diag(N)
for(i in 1:2000) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- 0*diag(N)
for(i in 1:3000) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- 0*diag(N)
for(i in 1:2500) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
opt.val <- 0*diag(N)
for(i in 1:2499) { opt.val <- opt.val + frf[,,i] %*% spec[,,i] %*% Conj(t(frf[,,i])) }
frf[,,2500]
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
m
frf.psi.sharp[,,m+1]
frf.psi.sharp[m+1]
frf.psi.sharp[m]
frf.psi.sharp[m+2]
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
bw.mdfa <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q)
# compare to criterion value
diag(bw.mdfa[[2]])
bw.mdfa <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
# compare to criterion value
diag(bw.mdfa[[2]])
bw.mdfa[[1]]
constraints.mdfa[[1]]
dim(constraints.mdfa[[1]])
dim(constraints.mdfa[[2]])
R <- constraints.mdfa[[1]]
Q <- constraints.mdfa[[2]]
q <- dim(R)[2]
M <- dim(R)[4]
R.mat <- matrix(R,nrow=N*q,ncol=N*M)
Q.mat <- matrix(Q,ncol=N)
bw.filter <- R.mat %*% bw.mdfa[[1]] + Q.mat
dim(R.mat)
dim(bw.mdfa[[1]])
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa <- mdfa.filter(frf.psi.sharp,spec.hat.sharp,
constraints.mdfa[[1]],constraints.mdfa[[2]])
# compare to criterion value
diag(bw.mdfa[[2]])
#bw.mdfa <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
#bw.filter <- R.mat %*% bw.mdfa[[1]] + Q.mat
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# Simulate a Gaussian RW of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
dpoly <- c(1,-1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,2))
d <- length(dpoly) - 1
z.sim <- mdfa.wnsim(rep(0,3),rep(1,N),T.sim+burn,Inf)
Sigma <- z.sim[[2]]
x.sim <- mdfa.ucsim(delta,z.sim[[1]])[(burn+1-d):(T.sim+burn-d),]
# construct and apply ideal low-pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
spec.hat <- mdfa.pergram(x.diff,dpoly)
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa <- mdfa.filter(frf.psi.sharp,spec.hat.sharp,
constraints.mdfa[[1]],constraints.mdfa[[2]])
#bw.mdfa <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
#bw.filter <- R.mat %*% bw.mdfa[[1]] + Q.mat
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
plot.ts(x.trend.idead[,1])
plot.ts(x.trend.ideal[,1])
lines(x.trend.mdfa[,1],col=2)
plot.ts(x.trend.ideal[,2])
lines(x.trend.mdfa[,2],col=2)
plot.ts(x.trend.ideal[1:100,2])
lines(x.trend.mdfa[1:100,2],col=2)
plot.ts(x.trend.ideal[1:1000,2])
lines(x.trend.mdfa[1:1000,2],col=2)
bw.mdfa.sharp <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
# compare to criterion value
diag(bw.mdfa[[2]])
# compare to criterion value
diag(bw.mdfa.sharp[[2]])
R.mat <- matrix(constraints.mdfa[[1]],nrow=N*q,ncol=N*(q-1))
Q.mat <- matrix(constraints.mdfa[[2]],ncol=N)
dim(bw.mdfa.sharp[[1]])
bw.mdfa.sharp[[1]][,,1]
bw.mdfa.sharp[[1]][,,2]
matrix(bw.mdfa.sharp[[1]],nrow=N)
bw.mdfa.filter <- R.mat %*% t(matrix(bw.mdfa.sharp[[1]],nrow=N)) + Q.mat
bw.mdfa.filter <- R.mat %*% t(matrix(bw.mdfa.sharp[[1]],nrow=N)) + Q.mat
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa)[(len-q+2):(T-q+1-len),]
bw.mdfa.filter <- array(t(R.mat %*% t(matrix(bw.mdfa.sharp[[1]],
nrow=N)) + Q.mat),c(N,N,q))
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa)[(len-q+2):(T-q+1-len),]
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa.filter)[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa.sharp <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
R.mat <- matrix(constraints.mdfa[[1]],nrow=N*q,ncol=N*(q-1))
Q.mat <- matrix(constraints.mdfa[[2]],ncol=N)
bw.mdfa.filter <- array(t(R.mat %*% t(matrix(bw.mdfa.sharp[[1]],
nrow=N)) + Q.mat),c(N,N,q))
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa.filter)[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
bw.mdfa.sharp[[1]]
bw.mdfa.sharp[[1]][,,1]
bw.mdfa.sharp[[1]][,,2]
bw.mdfa.filter[,,1]
diag(N) - bw.mdfa.sharp[[1]][,,1]
dim(R.mat)
R.mat[1:2,]
Q.mat[1:2,]
R.mat[1:4,]
dim(bw.mdfa.sharp[[1]])
R.mat <- toeplitz(c(-1,1,rep(0,q-2)))
R.mat
R.mat <- lower.tri(toeplitz(c(-1,1,rep(0,q-2))))
R.mat
R.mat <- toeplitz(c(-1,1,rep(0,q-2)))
R.mat[upper.tri(R.mat)] <- 0
R.mat
R.mat <- R.mat[,-q]
R.mat <- toeplitz(c(-1,1,rep(0,q-2)))
R.mat[upper.tri(R.mat)] <- 0
R.mat <- R.mat[,-q] %x% diag(N)
R.mat[1:4,1:4]
dim(R.mat)
Q.mat <- frf.psi[m+1]
Q.mat
# another way???
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
#constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa.sharp <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
R.mat <- toeplitz(c(-1,1,rep(0,q-2)))
R.mat[upper.tri(R.mat)] <- 0
R.mat <- R.mat[,-q] %x% diag(N)
Q.mat <- frf.psi[m+1]
Q.mat <- frf.psi[,,m+1]
Q.mat <- frf.psi[,,m+1] %x% c(1,rep(0,q-1))
bw.mdfa.filter <- array(t(R.mat %*% t(matrix(bw.mdfa.sharp[[1]],nrow=N)) + Q.mat),c(N,N,q))
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa.filter)[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
dim(bw.mdfa.filter)
plot.ts(bw.mdfa.filter[1,1,])
plot.ts(bw.mdfa.filter[2,2,])
Q.mat
Q.mat <- c(1,rep(0,q-1)) %x% frf.psi[,,m+1]
Q.mat
bw.mdfa.filter <- array(t(R.mat %*% t(matrix(bw.mdfa.sharp[[1]],nrow=N)) + Q.mat),c(N,N,q))
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa.filter)[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
constraints.mdfa <- mdfa.getconstraints(frf.psi,0,NULL,0*diag(N),q)
bw.mdfa <- mdfa.filter(frf.psi,spec.hat,constraints.mdfa[[1]],constraints.mdfa[[2]])
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa[[2]])
