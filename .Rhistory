install.packages("htmltools", type = "source")
rmarkdown::draft("my_poster.Rmd", template = "poster", package = "postr")
28927.73
28927.73 +105606.95
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
#  Tucker's libraries
library(expm)
library(R.utils)
library(xtable)
# set directory to GitHub/MDFA-Legacy
setwd("C:/Users/neide/Documents/GitHub/MDFA-Legacy")
# set directory to GitHub/MDFA-Legacy
setwd("C:/Users/neide/OneDrive/Documents/GitHub/MDFA-Legacy")
path.main <- paste(getwd(),"/Sweave/",sep="")
path.pgm <- paste(path.main,"Rnw/",sep="")
path.out <- paste(path.main,"Latex/",sep="")
## Load MDFA R codes #
sourceDirectory(path=paste(path.main,"RcodeTSM/",sep=""), modifiedOnly=FALSE)
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
N <- 1
q <- 10
## level constraint case
constraint.mat <- matrix(rep(1,q),nrow=1)
constraint.vec <- t(diag(N))
constraint.qr <- qr(constraint.mat)
constraint.q <- qr.Q(constraint.qr)
constraint.r <- qr.R(constraint.qr)
constraint.pivot <- constraint.qr$pivot
constraint.ipivot <- sort.list(constraint.pivot)
M <- q - dim(constraint.r)[2] + dim(constraint.q)[2]
R.mat <- rbind(-solve(constraint.r[,1:(dim(constraint.q)[2]),drop=FALSE],
constraint.r[,(dim(constraint.q)[2]+1):q,drop=FALSE]),diag(q-M))
R.mat <- R.mat[constraint.ipivot,] %x% diag(N)
Q.mat <- rbind(solve(constraint.r[,1:(dim(constraint.q)[2]),drop=FALSE]) %*%
solve(constraint.q),matrix(0,q-M,M))
Q.mat <- (Q.mat[constraint.ipivot,] %x% diag(N)) %*% constraint.vec
print(R.mat)
## time shift constraint case
constraint.mat <- matrix(seq(0,q-1),nrow=1)
constraint.vec <- -t(diag(N))
constraint.qr <- qr(constraint.mat)
constraint.q <- qr.Q(constraint.qr)
constraint.r <- qr.R(constraint.qr)
constraint.pivot <- constraint.qr$pivot
constraint.ipivot <- sort.list(constraint.pivot)
M <- q - dim(constraint.r)[2] + dim(constraint.q)[2]
R.mat <- rbind(-solve(constraint.r[,1:(dim(constraint.q)[2]),drop=FALSE],
constraint.r[,(dim(constraint.q)[2]+1):q,drop=FALSE]),diag(q-M))
R.mat <- R.mat[constraint.ipivot,] %x% diag(N)
Q.mat <- rbind(solve(constraint.r[,1:(dim(constraint.q)[2]),drop=FALSE]) %*%
solve(constraint.q),matrix(0,q-M,M))
Q.mat <- (Q.mat[constraint.ipivot,] %x% diag(N)) %*% constraint.vec
print(R.mat)
## level and time shift constraint case
constraint.mat <- rbind(rep(1,q),seq(0,q-1))
constraint.vec <- rbind(t(diag(N)),-t(diag(N)))
constraint.qr <- qr(constraint.mat)
constraint.q <- qr.Q(constraint.qr)
constraint.r <- qr.R(constraint.qr)
constraint.pivot <- constraint.qr$pivot
constraint.ipivot <- sort.list(constraint.pivot)
M <- q - dim(constraint.r)[2] + dim(constraint.q)[2]
R.mat <- rbind(-solve(constraint.r[,1:(dim(constraint.q)[2]),drop=FALSE],
constraint.r[,(dim(constraint.q)[2]+1):q,drop=FALSE]),diag(q-M))
R.mat <- R.mat[constraint.ipivot,] %x% diag(N)
Q.mat <- rbind(solve(constraint.r[,1:(dim(constraint.q)[2]),drop=FALSE]) %*%
solve(constraint.q),matrix(0,q-M,M))
Q.mat <- (Q.mat[constraint.ipivot,] %x% diag(N)) %*% constraint.vec
print(R.mat)
# Simulate a VAR(1) of sample size 5000:
set.seed(1234)
T <- 5000
N <- 2
levels <- c(1,2)
slopes <- c(-2,1)/1000
phi.matrix <- rbind(c(1,.5),c(-.2,.3))
innovar.matrix <- diag(N)
true.psi <- var.par2pre(array(phi.matrix,c(2,2,1)))
gamma <- VARMAauto(array(phi.matrix,c(2,2,1)),NULL,innovar.matrix,10)
gamma.0 <- gamma[,,1]
x.init <- t(chol(gamma.0)) %*% rnorm(N)
x.next <- x.init
x.sim <- NULL
for(t in 1:T)
{
x.next <- phi.matrix %*% x.next + t(chol(innovar.matrix)) %*% rnorm(N)
x.sim <- cbind(x.sim,x.next)
}
x.sim <- ts(t(x.sim))
time.trend <- seq(1,T)
x.sim <- t(levels) %x% rep(1,T) + t(slopes) %x% seq(1,T) + x.sim
sim.ols <- lm(x.sim ~ time.trend)
x.resid <- sim.ols$residuals
# construct and apply low pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
# get MDFA concurrent filter
q <- 30
grid <- T
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat <- mdfa.pergram(x.resid,1)
lp.mdfa.uc <- mdfa.unconstrained(frf.psi,spec.hat,q)
lp.mdfa.lc <- mdfa.levelconstraint(frf.psi,spec.hat,q)
lp.mdfa.tsc <- mdfa.tsconstraint(frf.psi,spec.hat,q)
lp.mdfa.ltsc <- mdfa.ltsconstraint(frf.psi,spec.hat,q)
# case 1: apply the unconstrained MDFA concurrent filter
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa.uc[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(lp.mdfa.uc[[2]])
# case 2: apply the lc MDFA concurrent filter
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa.lc[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(lp.mdfa.lc[[2]])
# case 3: apply the tsc MDFA concurrent filter
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa.tsc[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(lp.mdfa.tsc[[2]])
# case 4: apply the ltsc MDFA concurrent filter
x.trend.mdfa <- mvar.filter(x.sim,lp.mdfa.ltsc[[1]])[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(lp.mdfa.ltsc[[2]])
psi.sim <- c(2.17150287559847, -8.36795922528, -6.04133725367594,
0.0648981656699, -6.80849700177184, -6.66004335288479,
-0.00016098322952, 0.00051984185863)
psi.sim[7:8] <- c(0,0)
N <- 2
grid <- 1000
delta <- array(t(c(1,-1)) %x% diag(N),c(N,N,2))
mu.sim <- mdfa.wnsim(psi.sim[1:3],rep(1,N),10,Inf)
Sigma.mu <- mu.sim[[2]]
irr.sim <- mdfa.wnsim(psi.sim[4:6],rep(1,N),10,Inf)
Sigma.irr <- irr.sim[[2]]
iden <- array(diag(N),c(N,N,1))
f.mu <- mdfa.spectra(iden,iden,Sigma.mu,grid)
f.irr <- mdfa.spectra(iden,iden,Sigma.irr,grid)
trend.frf <- mdfa.wkfrf(iden,delta,f.irr,f.mu)
par(mar=c(2,2,2,2)+0.1,cex.lab=.8,mfrow=c(N,N))
for(i in 1:N)
{
for(j in 1:N)
{
plot(ts(Re(trend.frf[i,j,]),frequency=grid/2,start=-1),ylim=c(0,1),ylab="",
xlab="Cycles",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
}
}
invisible(dev.off())
psi.sim <- c(1.8905590615422, -11.9288577633298, -12.0809347541079,
0.660897814610799, -8.2863379601304, -5.66645335346871,
-1.34743227511595e-05, -1.41207967213544e-05)
psi.sim[7:8] <- c(0,0)
N <- 2
grid <- 1000
delta <- array(t(c(1,-2,1)) %x% diag(N),c(N,N,3))
mu.sim <- mdfa.wnsim(psi.sim[1:3],rep(1,N),10,Inf)
Sigma.mu <- mu.sim[[2]]
irr.sim <- mdfa.wnsim(psi.sim[4:6],rep(1,N),10,Inf)
Sigma.irr <- irr.sim[[2]]
iden <- array(diag(N),c(N,N,1))
f.mu <- mdfa.spectra(iden,iden,Sigma.mu,grid)
f.irr <- mdfa.spectra(iden,iden,Sigma.irr,grid)
trend.frf <- mdfa.wkfrf(iden,delta,f.irr,f.mu)
par(mar=c(2,2,2,2)+0.1,cex.lab=.8,mfrow=c(N,N))
for(i in 1:N)
{
for(j in 1:N)
{
plot(ts(Re(trend.frf[i,j,]),frequency=grid/2,start=-1),ylim=c(0,1),ylab="",
xlab="Cycles",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
}
}
invisible(dev.off())
psi.sim <- c(0.493586093056948, 0.178487258592539, 0.341217399125708,
0.399177274154249, 0.848325304642642, 0.68306879252262,
-2.3494687111314, -5.47534663726587, -6.69385117951384,
-6.08364145983965, 0.875100150810273, 0.221971271148611,
0.500866759201029, 0.340625016984097, 0.791037805495801,
0.985440262768576, -2.52890913740106, -4.29524634814519,
-5.98519527750281, -4.88659954275053, 0.0957466327314851,
0.201313350626488, 0.849351809157598, 0.48420520104336,
0.62643997675928, 1.13945063379914, -4.04217214895869,
-4.68919816059416, -4.73313805629826, -4.0627015759002,
0.923495751608401, -0.396067294450726, 0.244665046194039,
-0.36570474542918, 0.363995718736632, 0.758715172737758,
-3.05567431351817, -4.74337970092605, -4.96364133429136,
-5.06144086942249, 0.262963683605793, -0.181599400661918,
0.149795833258992, -0.105991649100357, 0.21503766242974,
-0.141649861043968, -2.07489346121933, -3.64302004053168,
-5.69277788172285, -5.3689470753418, 1.40718934367933,
-0.0085452878747676, -0.219886337273936, 0.0283662345070971,
1.23786259577472, 0.199834135215749, -4.53336362894347,
-4.70016052568401, -7.07530853221777, -6.03054443735399,
-0.0995506040524902, 0.116607848697947, 0.157899802233636,
-0.0363184981547607, 0.18385749297074, 0.329351477585333,
-2.1377604820296, -3.62882764786239, -5.11279846492415,
-3.62475631527416, 0.124305286145147, 0.0292507920421885,
-0.0873349194845382, 0.178977764316143, 0.484389128732254,
0.265835976421986, 1.87566939226944, 0.1445002084775,
-1.34264222816582, -0.305367634014929, -0.00488431480035087,
-0.000945659564684563, -0.00106126820173145, -0.000413658838890233)
psi.sim[81:84] <- c(0,0,0,0)
N <- 4
grid <- 1000
mu.sim <- mdfa.wnsim(psi.sim[1:10],rep(1,N),10,Inf)
Sigma.mu <- mu.sim[[2]]
seas1.sim <- mdfa.wnsim(psi.sim[11:20],rep(1,N),10,Inf)
Sigma.seas1 <- seas1.sim[[2]]
seas2.sim <- mdfa.wnsim(psi.sim[21:30],rep(1,N),10,Inf)
Sigma.seas2 <- seas2.sim[[2]]
seas3.sim <- mdfa.wnsim(psi.sim[31:40],rep(1,N),10,Inf)
Sigma.seas3 <- seas3.sim[[2]]
seas4.sim <- mdfa.wnsim(psi.sim[41:50],rep(1,N),10,Inf)
Sigma.seas4 <- seas4.sim[[2]]
seas5.sim <- mdfa.wnsim(psi.sim[51:60],rep(1,N),10,Inf)
Sigma.seas5 <- seas5.sim[[2]]
seas6.sim <- mdfa.wnsim(psi.sim[61:70],rep(1,N),10,Inf)
Sigma.seas6 <- seas6.sim[[2]]
irr.sim <- mdfa.wnsim(psi.sim[71:80],rep(1,N),10,Inf)
Sigma.irr <- irr.sim[[2]]
iden <- array(diag(N),c(N,N,1))
dpoly.1 <- c(1,-2*cos(pi/6),1)
dpoly.2 <- c(1,-2*cos(2*pi/6),1)
dpoly.3 <- c(1,-2*cos(3*pi/6),1)
dpoly.4 <- c(1,-2*cos(4*pi/6),1)
dpoly.5 <- c(1,-2*cos(5*pi/6),1)
dpoly.6 <- c(1,1)
dpoly.but1 <- polymult(dpoly.2,polymult(dpoly.3,polymult(dpoly.4,polymult(dpoly.5,dpoly.6))))
dpoly.but2 <- polymult(dpoly.1,polymult(dpoly.3,polymult(dpoly.4,polymult(dpoly.5,dpoly.6))))
dpoly.but3 <- polymult(dpoly.1,polymult(dpoly.2,polymult(dpoly.4,polymult(dpoly.5,dpoly.6))))
dpoly.but4 <- polymult(dpoly.1,polymult(dpoly.2,polymult(dpoly.3,polymult(dpoly.5,dpoly.6))))
dpoly.but5 <- polymult(dpoly.1,polymult(dpoly.2,polymult(dpoly.3,polymult(dpoly.4,dpoly.6))))
dpoly.but6 <- polymult(dpoly.1,polymult(dpoly.2,polymult(dpoly.3,polymult(dpoly.4,dpoly.5))))
delta.c <- array(t(c(1,-2,1)) %x% diag(N),c(N,N,3))
delta.but1 <- array(t(dpoly.but1) %x% diag(N),c(N,N,10))
delta.but2 <- array(t(dpoly.but2) %x% diag(N),c(N,N,10))
delta.but3 <- array(t(dpoly.but3) %x% diag(N),c(N,N,10))
delta.but4 <- array(t(dpoly.but4) %x% diag(N),c(N,N,10))
delta.but5 <- array(t(dpoly.but5) %x% diag(N),c(N,N,10))
delta.but6 <- array(t(dpoly.but6) %x% diag(N),c(N,N,11))
delta.seas <- array(t(rep(1,12)) %x% diag(N),c(N,N,12))
f.mu <- mdfa.spectra(iden,iden,Sigma.mu,grid)
f.seas1 <- mdfa.spectra(iden,delta.but1,Sigma.seas1,grid)
f.seas2 <- mdfa.spectra(iden,delta.but2,Sigma.seas2,grid)
f.seas3 <- mdfa.spectra(iden,delta.but3,Sigma.seas3,grid)
f.seas4 <- mdfa.spectra(iden,delta.but4,Sigma.seas4,grid)
f.seas5 <- mdfa.spectra(iden,delta.but5,Sigma.seas5,grid)
f.seas6 <- mdfa.spectra(iden,delta.but6,Sigma.seas6,grid)
f.irr <- mdfa.spectra(iden,delta.c,Sigma.irr,grid)
f.signal <- f.mu + f.irr
f.noise <- f.seas1 + f.seas2 + f.seas3 + f.seas4 + f.seas5 + f.seas6
sa.frf <- mdfa.wkfrf(delta.seas,delta.c,f.noise,f.signal)
par(mar=c(2,2,2,2)+0.1,cex.lab=.8,mfrow=c(N,N))
for(i in 1:N)
{
for(j in 1:N)
{
plot(ts(Re(sa.frf[i,j,]),frequency=grid/2,start=-1),ylim=c(-.5,1),ylab="",
xlab="Cycles",yaxt="n",xaxt="n")
abline(h=0,col=grey(.7))
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
}
}
invisible(dev.off())
# Simulate a Gaussian RW of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
dpoly <- c(1,-1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,2))
d <- length(dpoly) - 1
z.sim <- mdfa.wnsim(rep(0,3),rep(1,N),T.sim+burn,Inf)
Sigma <- z.sim[[2]]
x.sim <- mdfa.ucsim(delta,z.sim[[1]])[(burn+1-d):(T.sim+burn-d),]
# construct and apply ideal low-pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
bw.mdfa.sharp <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
R.mat <- toeplitz(c(-1,1,rep(0,q-2)))
R.mat[upper.tri(R.mat)] <- 0
R.mat <- R.mat[,-q] %x% diag(N)
Q.mat <- c(1,rep(0,q-1)) %x% frf.psi[,,m+1]
bw.mdfa.filter <- array(t(R.mat %*% t(matrix(bw.mdfa.sharp[[1]],nrow=N)) + Q.mat),c(N,N,q))
x.trend.mdfa <- mvar.filter(x.sim,bw.mdfa.filter)[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(bw.mdfa.sharp[[2]])
# Simulate an integrated VAR(1) of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
rho <- .95
theta <- pi/24
phi <- matrix(c(rho*cos(theta),rho*sin(theta),-rho*sin(theta),rho*cos(theta)),c(2,2))
phi.array <- array(cbind(diag(N),-1*phi),c(N,N,2))
dpoly <- c(1,-1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,2))
d <- length(dpoly) - 1
z.sim <- mdfa.wnsim(rep(0,3),rep(1,N),T.sim+burn,Inf)
Sigma <- z.sim[[2]]
var.sim <- mdfa.ucsim(phi.array,z.sim[[1]])
x.sim <- mdfa.ucsim(delta,var.sim)[(burn+1-d-2):(T.sim+burn-d-2),]
# construct and apply ideal band-pass filter
mu <- pi/60
eta <- pi/12
len <- 1000
bp.filter <- c(eta/pi,sin(seq(1,len)*eta)/(pi*seq(1,len))) -
c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
bp.filter <- c(rev(bp.filter),bp.filter[-1])
x.cycle.ideal <- filter(x.sim,bp.filter,method="convolution",sides=2)[(len+1):(T-len),]
# get MDFA concurrent filter
q <- 10
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal band-pass
frf.psi <- rep(0,grid)
frf.psi[(abs(freq.ft) >= mu) & (abs(freq.ft) <= eta)] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1] <- 0
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
spec.hat.sharp <- mdfa.pergram(x.diff,1)
bp.mdfa.sharp <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-1)
R.mat <- toeplitz(c(-1,1,rep(0,q-2)))
R.mat[upper.tri(R.mat)] <- 0
R.mat <- R.mat[,-q] %x% diag(N)
Q.mat <- c(1,rep(0,q-1)) %x% frf.psi[,,m+1]
bp.mdfa.filter <- array(t(R.mat %*% t(matrix(bp.mdfa.sharp[[1]],nrow=N)) + Q.mat),c(N,N,q))
x.cycle.mdfa <- mvar.filter(x.sim,bp.mdfa.filter)[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.cycle.ideal[,1] - x.cycle.mdfa[,1])^2),
mean((x.cycle.ideal[,2] - x.cycle.mdfa[,2])^2)))
# compare to criterion value
diag(bp.mdfa.sharp[[2]])
# get MDFA concurrent filter
q <- 30
R.mat <- toeplitz(c(-1,1,rep(0,q-2)))
R.mat
R.mat[upper.tri(R.mat)] <- 0
R.mat
# Simulate a Gaussian RW of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
dpoly <- c(1,-1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,2))
d <- length(dpoly) - 1
z.sim <- mdfa.wnsim(rep(0,3),rep(1,N),T.sim+burn,Inf)
Sigma <- z.sim[[2]]
x.sim <- mdfa.ucsim(delta,z.sim[[1]])[(burn+1-d):(T.sim+burn-d),]
# construct and apply ideal low-pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- mvar.filter(x.sim,array(t(lp.filter) %x% diag(N),c(N,N,(2*len+1))))
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi.sharp <- (frf.psi - frf.psi[m+1])/(exp(-1i*freq.ft)-1)
frf.psi.sharp[m+1]
frf.psi.sharp[m]
frf.psi.sharp <- matrix(frf.psi.sharp,nrow=1) %x% diag(N)
frf.psi.sharp <- array(frf.psi.sharp,c(N,N,grid))
plot.ts(frf.psi)
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,grid))
# Simulate a Gaussian STM  of sample size 5000:
set.seed(1234)
T.sim <- 5000
burn <- 1000
N <- 2
psi.sim <- c(1.8905590615422, -11.9288577633298, -12.0809347541079,
0.660897814610799, -8.2863379601304, -5.66645335346871,
-1.34743227511595e-05, -1.41207967213544e-05)
psi.sim[7:8] <- c(0,0)
len <- 1000
dpoly <- c(1,-2,1)
delta <- array(t(dpoly) %x% diag(N),c(N,N,3))
d <- length(dpoly) - 1
mu.sim <- mdfa.wnsim(psi.sim[1:3],rep(1,N),T.sim+burn,Inf)
Sigma.mu <- mu.sim[[2]]
mu.sim <- mdfa.ucsim(delta,mu.sim[[1]])[(burn+1-d):(T.sim+burn-d),]
irr.sim <- mdfa.wnsim(psi.sim[4:6],rep(1,N),T.sim,Inf)
Sigma.irr <- irr.sim[[2]]
irr.sim <- irr.sim[[1]]
x.sim <- mu.sim + irr.sim
#Q.snr <- Sigma.mu %*% solve(Sigma.irr)
Q.snr <- (1/1600) * diag(N)
grid <- T.sim - d
m <- floor(grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*grid^{-1}*(seq(1,grid) - (m+1))
# frf for HP low-pass
frf.psi <- array(0,c(N,N,grid))
for(i in 1:grid)
{
frf.psi[,,i] <- Q.snr %*% solve(Q.snr + (2 - 2*cos(freq.ft[i]))^2*diag(N))
}
# construct and apply low-pass HP filter
hp.filter <- mdfa.coeff(frf.psi,-len,len)
x.trend.hp <- mvar.filter(x.sim,hp.filter)
# get MDFA concurrent filter
q <- 30
x.diff <- filter(x.sim,dpoly,method="convolution",sides=1)[(d+1):T.sim,]
# frf calculations
frf.psi.sharp <- array(0,c(N,N,grid))
for(i in 1:grid)
{
frf.psi.sharp[,,i] <- -1*(1-exp(1i*freq.ft[i]))^2*
solve(Q.snr + (2 - 2*cos(freq.ft[i]))^2*diag(N))
}
spec.hat.sharp <- mdfa.pergram(x.diff,1)
hp.mdfa.sharp <- mdfa.unconstrained(frf.psi.sharp,spec.hat.sharp,q-2)
R.mat <- toeplitz(c(rev(dpoly),rep(0,q-3)))
R.mat[upper.tri(R.mat)] <- 0
R.mat <- R.mat[,-c(q-1,q)] %x% diag(N)
Q.mat <- c(1,rep(0,q-1)) %x% frf.psi[,,m+1]
hp.mdfa.filter <- array(t(R.mat %*% t(matrix(hp.mdfa.sharp[[1]],nrow=N)) + Q.mat),c(N,N,q))
x.trend.mdfa <- mvar.filter(x.sim,hp.mdfa.filter)[(len-q+2):(T-q+1-len),]
# compare in-sample performance
print(c(mean((x.trend.hp[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.hp[,2] - x.trend.mdfa[,2])^2)))
# compare to criterion value
diag(hp.mdfa.sharp[[2]])
plot.ts(x.trend.hp[,1])
lines(x.trend.mdfa[,1])
lines(x.trend.mdfa[,1],col=2)
plot.ts(x.trend.hp[,2])
lines(x.trend.mdfa[,2],col=2)
